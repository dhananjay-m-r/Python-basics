# -*- coding: utf-8 -*-
"""ln 6 Intext Examples_Flow of control.ipynb
Automatically generated by Colaboratory.
Original file is located at
    https://colab.research.google.com/drive/1DxtxEE6oTP_LfuYV0eB2Pw1J3z9RZleq
#About this notebook
Notebook made by: Dhananjay M.R
Subject: Computer Science - Grade 11 CBSE
Language: - Python
Topic: Intext Questions - Flow of control
Execution mode: Script Mode

Note: This is a compilation of the entire book. 
If you run this program directly, you may encouter with error.
Therefore it is recommended to cut the program (modify) and run it part by part

Refering the original file at Colaboratory is recommended
Original file is located at
    https://colab.research.google.com/drive/1DxtxEE6oTP_LfuYV0eB2Pw1J3z9RZleq

#Program 6-1: Program to print the difference of two numbers.
"""

#Program 6-1 #Program to print the difference of two input numbers
num1 = int(input("Enter first number: "))
num2 = int(input("Enter second number: "))
diff = num1 - num2
print('')   #Optional Line/Statement
print("The difference of",num1,"and",num2,"is",diff)

"""#Example 6.1: Eligibility to vote

In this example, if the age entered by the user is greater than 18, then print that the user is eligible to vote. If the condition is true, then the indented statement(s) are executed. The indentation implies that its execution is dependent on the condition. There is no limit on the number of statements that can appear as a block under the if statement.
"""

age = int(input("Enter your age: ")) 
if age >= 18:
  print("Eligible to vote") 
else:
  print("Not eligible to vote")

"""#Program 6-2 Program to print the positive difference of two numbers.

Many a times there are situations that require multiple conditions to be checked and it may lead to many alternatives. In such cases we can chain the conditions using if..elif (elif means else..if) as demonstrated below
"""

num1 = int(input("Enter first number: "))
num2 = int(input("Enter second number: "))

if num1 > num2:
  diff = num1 - num2
else:
  diff = num2 - num1 

print("The positive difference of",num1,"and",num2,"is",diff)

"""#Example 6.2 Check whether a number is positive, negative, or zero."""

number = int(input("Enter a number: "))

if number > 0:
  print("Number is positive")

elif number < 0:
  print("Number is negative")

else:
  print("Number is zero")

"""#Example 6.3 Display the appropriate message as per the colour of signal at the road crossing."""

signal = input("Enter the colour: ")

if signal == "red" or signal == "RED":
  print("STOP")
  
elif signal == "orange" or signal == "ORANGE":
  print("Be Slow")
  
elif signal == "green" or signal == "GREEN":
  print("Go!")

"""#Program 6-3 Write a program to create a simple calculator  performing only four basic operations.

Number of elif is dependent on the number of conditions to be checked. If the first condition is false, then the next condition is checked, and so on. If one of the conditions is true, then the corresponding indented block executes, and the if statement terminates.
"""

result = 0

val1 = float(input("Enter value 1: "))
val2 = float(input("Enter value 2: "))
op = input("Enter any one of the operator (+,-,*,/): ")

if op == "+":
  result = val1 + val2

elif op == "-":
  if val1 > val2:
    result = val1 - val2
  else:
    result = val2 - val1  

elif op == "*":
  result = val1 * val2

elif op == "/":    
  if val2 == 0:
    print("Error! Division by zero is not allowed. Program terminated")
  else:
    result = val1/val2

else:
   print("Wrong input,program terminated")

print("The result is ",result)

"""In the program, for the operators "-" and "/", there exists an if..else condition within the elif block. This is called nested if. We can have many levels of nesting inside if..else statements.

#Indentation
In most programming languages, the statements within a block are put inside curly brackets. However, Python uses indentation for block as well as for nested block structures. Leading whitespace (spaces and tabs) at the beginning of a statement is called indentation. In Python, the same level of indentation associates statements into a single block of code. The interpreter checks indentation levels very strictly and throws up syntax errors if indentation is not correct. It is a common practice to use a single tab for each level of indentation.

#Program 6-4 Program to find the larger of the two pre-specified numbers.
"""

num1 = 5
num2 = 6 

if num1 > num2:
  print("first number is larger")
  print("Bye") 

else:
  print("second number is larger")
  print("Bye Bye")

"""In the above program 6-4, the if-else statement has two blocks of statements and the statements in each block are indented with the same amount of spaces or tabs.

#'For' Loop
The for statement is used to iterate over a range of values or a sequence. The for loop is executed for each of the items in the range. These values can be either numeric, or, as we shall see in later chapters, they can be elements of a data type like a string, list, or tuple. With every iteration of the loop, the control variable checks whether each of the values in the range have been traversed or not. When all the items in the range are exhausted, the statements within loop are not executed; the control is then transferred to the statement immediately following the for loop. While using for loop, it is known in advance the number of times the loop will execute.

#(A) Syntax of the For Loop

    for<control-variable> in <sequence/ items in range>:
        <statements inside body of the loop>

#Program 6-6: Program to print the characters in the string ‘PYTHON’ using for  loop.
"""

for letter in 'PYTHON':
  print(letter)

"""#Program 6-7: Program to print the numbers in a given  sequence using for loop."""

count = [10,20,30,40,50]
for num in count:
  print(num)

"""#Program 6-8: Program to print even numbers in a given sequence using for loop."""

numbers = [1,2,3,4,5,6,7,8,9,10]
for num in numbers:
  if (num % 2) == 0:
    print(num,'is an even Number')

"""#(B) The Range() Function
The range() is a built-in function in Python. 

Syntax of range() function is: `range([start], stop[, step])`

It is used to create a list containing a sequence of integers from the given start value upto stop value (excluding stop value), with a difference of the given step value. We will learn about functions in the next chapter. To begin with, simply remember that function takes parameters to work on. In function range(), start, stop and step are parameters. 

The start and step parameters are optional. If start value is not specified, by default the list starts from 0. If step is also not specified, by default the value increases by 1 in each iteration. All parameters of range() function must be integers. The step parameter can be a positive or a negative integer excluding zero.

#Example 6.4:
"""

#start and step not specified >>> 
list(range(10))

#default step value is 1 >>> 
list(range(2, 10))

"""The function range() is often used in for loops for generating a sequence of numbers."""

#step value is 5 >>> 
list(range(0, 30, 5))

#step value is -1. Hence, decreasing  
#sequence is generated >>>
list (range (0, -9, -1))

"""#Program 6-9: Program to print the multiples of 10 for  numbers in a given range."""

for num in range(5):
  if num > 0:
    print(num * 10)

"""#The ‘While’ Loop
The while statement executes a block of code repeatedly as long as the control condition of the loop is true. The control condition of the while loop is executed before any statement inside the loop is executed. After each iteration, the control condition is tested again and the loop continues as long as the condition remains true. When this condition becomes false, the statements in the body  of loop are not executed and the control is transferred to the statement immediately following the body of while loop. If the condition of the while loop is initially false, the body is not executed even once. 

The statements within the body of the while loop must ensure that the condition eventually becomes false; otherwise the loop will become an infinite loop, leading to a logical error in the program.

#Syntax of while Loop: 
```
while test_condition: 
    body of while
```

#Program 6-10: Program to print first 5 natural numbers using while loop.
"""

count = 1
while count <= 5:
  print(count)
  count += 1

"""#Program 6-11: Program to find the factors of a whole number using while loop."""

num = int(input("Enter a number to find its factor: "))
print (1, end=' ')   #1 is a factor of every number 
factor = 2 

while factor <= num/2 :
  if num % factor == 0:
    #the optional parameter end of print function specifies the delimeter 
    #blank space(' ') to print next value on same line 
    print(factor, end=' ')
  factor += 1
print (num, end=' ') #every number is a factor of itself

"""# Break Statement
The `break` statement alters the normal flow of execution as it terminates the current loop and resumes execution of the statement following that loop.

#Program 6-12: Program to demonstrate use of break statement.
"""

num = 0
for num in range(10):
  num = num + 1
  if num == 8:
    break
  print('Num has value ' + str(num))
print('Encountered break!! Out of loop')

"""**Note:** When value of num becomes 8, the break statement is executed and the for loop terminates.

#Program 6-13: Find the sum of all the positive numbers entered by the user. As soon as the user enters a negative number, stop taking in any further input from the user and display the sum.
"""

entry = 0 
sum1 = 0
print("Enter numbers to find their sum, negative number ends the loop:") 

while True:
  #int() typecasts string to integer
  entry = int(input())
  if (entry < 0):
    break
  sum1 += entry
print("Sum =", sum1)

"""#Program 6-14: Program to check if the input number is prime or not."""

num = int(input("Enter the number to be checked: ")) 

flag = 0           #presume num is a prime number 

if num > 1 :
  for i in range(2, int(num / 2)):
    if (num % i == 0):
      flag = 1  #num is a not prime number
      break     #no need to check any further
  if flag == 1:
      print(num , "is not a prime number")
  else:
      print(num , "is a prime number")
else:
    print("Entered number is <= 1, execute again!")

"""#Continue Statement
When a `continue` statement is encountered, the control skips the execution of remaining statements inside the body of the loop for the current iteration and jumps to the beginning of the loop for the next iteration. If the loop’s condition is still true, the loop is entered again, else the control is transferred to the statement immediately following the loop.

#Program 6-15: Program to demonstrate the use of continue statement.
"""

num = 0
for num in range(6):
  num = num + 1
  if num == 3:
    continue
  print('Num has value ' + str(num))
print('End of loop')

"""Observe that the value 3 is not printed in the output, but the loop continues after the continue statement to print other values till the for loop terminates.

#Nested Loops
A loop may contain another loop inside it. A loop inside another loop is called a nested loop.

#Program 6-16: Program to demonstrate working of nested for loops.
"""

for var1 in range(3):
  print( "Iteration " + str(var1 + 1) + " of outer loop")
  for var2 in range(2):    #nested loop 
    print(var2 + 1)
  print("Out of inner loop")
print("Out of outer loop")

"""#Program 6-17: Program to print the pattern for a number input by the user."""

num = int(input("Enter a number to generate its pattern = "))
for i in range(1,num + 1):
  for j in range(1,i + 1):
    print(j, end = " ")
  print()

"""#Program 6-18: Program to find prime numbers between 2 to 50 using nested for loops."""

num = 2 
for i in range(2, 50):
  j= 2
  while ( j <= (i/2)):
    if (i % j == 0):  #factor found
      break           #break out of while loop
    j += 1     
  if ( j > i/j) :           #no factor found
    print( i, "is a prime number") 
print("Bye Bye!!")
